{"version":3,"sources":["components/NavBar.js","components/Rating.js","components/Card.js","components/CartItem.js","components/ShoppingCart.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","style","margin","onClick","this","props","toggleForm","size","icon","faPlusCircle","toggleCart","faShoppingCart","React","Component","Rating","state","rating","stars","reviews","propsArray","i","parseInt","push","map","star","key","faStar","Card","data","image","houseType","title","location","payment","src","alt","description","city","country","cost","addToCart","bind","CardItem","item","removeItem","faTrashAlt","ShoppingCart","items","total","length","reduce","accum","curr","class","faWindowClose","CartItem","Form","handleSubmit","e","preventDefault","cancellation","console","log","postHotel","setState","handleInputChange","change","target","name","value","onSubmit","htmlFor","onChange","required","id","type","maxLength","min","step","max","App","showCart","showForm","cart","includes","filter","hotel","hotels","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.043d9b57.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle, faShoppingCart } from '@fortawesome/free-solid-svg-icons';\r\nimport '../App.scss';\r\n\r\nclass NavBar extends React.Component {\r\n    static propTypes = {\r\n        toggleForm: PropTypes.func,\r\n        toggleCart: PropTypes.func\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <header>\r\n                <nav>\r\n                    <h1>Hotels</h1>\r\n                    <div className=\"iconLinks\">\r\n                    <button style={{margin: \"0rem 1rem\"}} onClick={this.props.toggleForm}>\r\n                        <FontAwesomeIcon \r\n                            size=\"2x\"  \r\n                            icon={faPlusCircle} />\r\n                    </button>\r\n                    <button onClick={this.props.toggleCart}>\r\n                        <FontAwesomeIcon \r\n                            size=\"2x\" \r\n                            icon={faShoppingCart} />\r\n                    </button>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons'; \r\nimport PropTypes from 'prop-types';\r\nimport '../App.scss';\r\n\r\nclass Rating extends React.Component {\r\n    static propTypes = {\r\n        rating: PropTypes.shape({\r\n            stars: PropTypes.number,\r\n            reviews: PropTypes.number\r\n        })\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { stars, reviews } = this.props.rating;\r\n        let propsArray = []\r\n        for (let i = 1; i <= parseInt(stars); i++) {\r\n            propsArray.push(\"full\");\r\n        }\r\n        \r\n        return(\r\n            <div className=\"rating\">\r\n                {propsArray.map((star, i) => {\r\n                    if (star === \"full\") {\r\n                        return <FontAwesomeIcon key={i} icon={faStar} />\r\n                    }\r\n                    return;\r\n                })}\r\n                {` ${stars} (${reviews})`}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Rating;","import React from 'react';\r\nimport Rating from './Rating';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.scss';\r\n\r\nclass Card extends React.Component {\r\n    static propTypes = {\r\n        data: PropTypes.shape({\r\n            image: PropTypes.string,\r\n            houseType: PropTypes.string,\r\n            title: PropTypes.string,\r\n            location: PropTypes.shape({\r\n                city: PropTypes.string,\r\n                country: PropTypes.string\r\n            }),\r\n            payment: PropTypes.shape({\r\n                cost: PropTypes.number,\r\n                description: PropTypes.string\r\n            }),\r\n            rating: PropTypes.shape({\r\n                start: PropTypes.number,\r\n                reviews: PropTypes.number\r\n            })\r\n        })\r\n    }\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        const { image, houseType, title, location, payment, rating } = this.props.data\r\n        return(\r\n            <div className=\"card\">\r\n                <div className=\"imageContent\">\r\n                    <Rating rating={rating} />\r\n                    <img src={image} alt={title} />\r\n                    {payment.description ? <div className=\"description\">{payment.description}!</div> : null}\r\n                </div>\r\n                <div className=\"cardContent\">\r\n                  <h3>{houseType}</h3>  \r\n                  <p>{`${location.city}, ${location.country}`}</p>\r\n                  <p>{title}</p>\r\n                  <p><em>${payment.cost}</em> / night</p>\r\n                  <button onClick={this.props.addToCart.bind(this, this.props.data)}>Book Now</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.scss';\r\n\r\nclass CardItem extends React.Component {\r\n    static propTypes = {\r\n        countFrom: PropTypes.shape({\r\n            image: PropTypes.string,\r\n            title: PropTypes.string,\r\n            location: PropTypes.shape({\r\n                city: PropTypes.string,\r\n                country: PropTypes.string\r\n            }),\r\n            payment: PropTypes.shape({\r\n                cost: PropTypes.number,\r\n                description: PropTypes.string\r\n            })\r\n        })\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        const { image, title, location, payment } = this.props.item;\r\n \r\n        return(\r\n            <div className=\"cartItem\">\r\n                <img src={image} alt={title} />\r\n                <div className=\"itemDescription\">\r\n                    <p>{`${location.city}, ${location.country}`}</p>\r\n                    <p>{title}</p>\r\n                </div>\r\n                <p><em>${payment.cost}</em></p>\r\n                <FontAwesomeIcon onClick={this.props.removeItem.bind(this, this.props.item)} className=\"trash\" icon={faTrashAlt} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CardItem;","import React from 'react';\r\nimport CartItem from './CartItem';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.scss';\r\n\r\nclass ShoppingCart extends React.Component {\r\n    static propTypes = {\r\n        class: PropTypes.string,\r\n        items: PropTypes.array,\r\n        removeItem: PropTypes.func,\r\n        toggleCart: PropTypes.func\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { items } = this.props;\r\n        const total = items.length > 0 ? items.map(item => parseInt(item.payment.cost)).reduce((accum, curr) => accum + curr) : '';\r\n        return(\r\n            <div className={this.props.class}>\r\n                <h2>Shopping Cart</h2>\r\n                <button className=\"close\" onClick={this.props.toggleCart}><FontAwesomeIcon icon={faWindowClose} /></button>\r\n                {items.length > 0 ? items.map(item => <CartItem removeItem={this.props.removeItem} item={item} key={item.title}/>) : \"You have no items in your cart\"}\r\n                {items.length > 0 ? <p className=\"total\">Total: ${total}</p> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShoppingCart;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.scss';\r\n\r\nclass Form extends React.Component {\r\n    static propTypes = {\r\n        class: PropTypes.bool,\r\n        postHotel: PropTypes.func,\r\n        toggleForm: PropTypes.func\r\n    }\r\n   \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            houseType: 'House',\r\n            city: '',\r\n            country: 'USA',\r\n            title: '',\r\n            cancellation: false,\r\n            image: '',\r\n            cost: 0,\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n    }\r\n\r\n    handleInputChange(e) {\r\n        let change = {}\r\n        change[e.target.name] = e.target.value\r\n        this.setState(change)\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const item = {\r\n            title: this.state.title,\r\n            houseType: this.state.houseType,\r\n            image: this.state.image,\r\n            location: {\r\n                city: this.state.city,\r\n                country: this.state.country,\r\n            },\r\n            payment: {\r\n                cost: this.state.cost,\r\n                description: this.state.cancellation ? 'Free cacellation' : '',\r\n            },\r\n            rating: {\r\n                stars: 3,\r\n                reviews: 0,\r\n            }\r\n        }\r\n        console.log(item)\r\n        this.props.postHotel(item);\r\n        this.setState({\r\n            houseType: 'House',\r\n            city: '',\r\n            country: 'USA',\r\n            title: '',\r\n            cancellation: false,\r\n            image: '',\r\n            cost: 0,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className={this.props.class ? \"form showForm\" : \"form\"}>\r\n                <h2>Add a Listing</h2>\r\n                <button className=\"close\" onClick={this.props.toggleForm}><FontAwesomeIcon icon={faWindowClose} /></button>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"houseType\">Type of accomodation</label>\r\n                    <select onChange={this.handleInputChange} required name=\"houseType\" id=\"houseType\">\r\n                        <option value=\"Entire House\">House</option>\r\n                        <option value=\"Apartment\">Apartment</option>\r\n                        <option value=\"Private Room\">Private Room</option>\r\n                        <option value=\"Public Room\">Public Room</option>\r\n                    </select>\r\n\r\n                    <div className=\"formGroup\">\r\n                        <div>\r\n                            <label htmlFor=\"city\">City</label>\r\n                            <input onChange={this.handleInputChange} required id=\"city\" name=\"city\" type=\"text\" />\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"country\">Country</label>\r\n                            <select onChange={this.handleInputChange} required name=\"country\" id=\"country\">\r\n                                <option value=\"USA\">United States of America</option>\r\n                                <option value=\"Canada\">Canada</option>\r\n                                <option value=\"Mexico\">Mexico</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <label htmlFor=\"title\">Describe the property (max 50 characters)</label>\r\n                    <input onChange={this.handleInputChange} required id=\"title\" maxLength=\"50\" name=\"title\" type=\"text\" />\r\n\r\n                    <label htmlFor=\"image\">Image URL</label>\r\n                    <input onChange={this.handleInputChange} required type=\"url\" name=\"image\" />\r\n\r\n                    <div className=\"formGroup\">\r\n                        <div>\r\n                            <label htmlFor=\"cost\">Cost per night</label>\r\n                            <input onChange={this.handleInputChange} required type=\"number\" name=\"cost\" min=\"10\" step=\"5\" max=\"1000\" />\r\n                        </div>\r\n\r\n                        <div className=\"checkbox\">\r\n                            <label htmlFor=\"cancellation\">Allow Free Cancellation?</label>\r\n                            <input onChange={this.handleInputChange} type=\"checkbox\" name=\"cancellation\" />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <button className=\"button\">Submit</button>\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport NavBar from './components/NavBar';\nimport Card from './components/Card';\nimport ShoppingCart from './components/ShoppingCart';\nimport Form from './components/Form';\nimport data from './airbnbs.json'\nimport './App.scss';\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          showCart: false,\n          showForm: false,\n          cart: [],\n          hotels: [...data]\n      }\n    }\n    toggleCart = () => {\n      this.setState({ showCart: !this.state.showCart })\n    }\n\n    toggleForm = () => {\n      this.setState({ showForm: !this.state.showForm })\n    }\n\n    addToCart = (item) => {\n      if (!this.state.cart.includes(item)) {\n        return this.setState({ showCart: true, cart: [...this.state.cart, item]});\n      } \n      return this.setState({ showCart: true });\n    }\n\n    removeItem = (item) => {\n      this.setState({ cart: this.state.cart.filter(hotel => hotel.title !== item.title)})\n    }\n\n    postHotel = (item) => {\n      this.setState({ hotels: [...this.state.hotels, item], showForm: false })\n    }\n\n    render() {\n\n      return (\n        <div className=\"mainContainer\">\n          <NavBar toggleForm={this.toggleForm} toggleCart={this.toggleCart} />\n          <div className=\"mainContent\">\n            <Form class={this.state.showForm} postHotel={this.postHotel} toggleForm={this.toggleForm} />\n            <ShoppingCart class={this.state.showCart ? \"shoppingCart show\" : \"shoppingCart\" } items={this.state.cart} removeItem={this.removeItem} toggleCart={this.toggleCart}/>\n            <section className=\"hotelContainer\">\n              {this.state.hotels.map(item => <Card key={item.title} addToCart={this.addToCart} data={item} />)}\n            </section>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}